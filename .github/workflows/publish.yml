name: Publish Package to GitHub Packages
on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@insightblue-co'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: Setup .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "@insightblue-co:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=\${NODE_AUTH_TOKEN}" >> .npmrc
          echo "auto-install-peers=true" >> .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          echo "git-checks=false" >> .npmrc
      
      - name: Git config
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Build packages
        run: pnpm run build
      
      - name: Stage and commit build files
        run: |
          git add .
          git status
          git commit -m "chore: update build files [skip ci]" || echo "No changes to commit"
      
      - name: Create main package file
        run: |
          TEMP_DIR=$(mktemp -d)
          echo "Creating main package in $TEMP_DIR"
          
          # Create initial package.json structure
          echo '{"name":"@insightblue-co/pdfme","version":"0.0.0","description":"PDF generation library - InsightBlue fork","main":"index.js","dependencies":{' > $TEMP_DIR/package.json
          
          # Add dependencies
          FIRST=true
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              PKG_NAME=$(cd $pkg && node -p "require('./package.json').name.replace(/^@[^/]+\/?/, '')")
              if [ "$FIRST" = true ]; then
                echo "\"@insightblue-co/pdfme-${PKG_NAME}\": \"^0.0.0\"" >> $TEMP_DIR/package.json
                FIRST=false
              else
                echo ",\"@insightblue-co/pdfme-${PKG_NAME}\": \"^0.0.0\"" >> $TEMP_DIR/package.json
              fi
            fi
          done
          
          # Close package.json
          echo '},"repository":{"type":"git","url":"git+https://github.com/insightblue-co/pdfme.git"},"publishConfig":{"registry":"https://npm.pkg.github.com"}}' >> $TEMP_DIR/package.json
          
          # Create index.js
          echo '' > $TEMP_DIR/index.js
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              PKG_NAME=$(cd $pkg && node -p "require('./package.json').name.replace(/^@[^/]+\/?/, '')")
              echo "exports.${PKG_NAME} = require('@insightblue-co/pdfme-${PKG_NAME}');" >> $TEMP_DIR/index.js
            fi
          done
          
          echo "Created main package files in $TEMP_DIR"
          echo "Contents of package.json:"
          cat $TEMP_DIR/package.json
          echo "Contents of index.js:"
          cat $TEMP_DIR/index.js
          
          # Validate JSON
          if ! node -e "JSON.parse(require('fs').readFileSync('$TEMP_DIR/package.json', 'utf8'))"; then
            echo "Error: Invalid JSON in package.json"
            exit 1
          fi
          
          # Store temp dir path for next step
          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
      
      - name: Bump version and publish packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determine version bump type
          if echo "$COMMIT_MSG" | grep -i "major:"; then
            VERSION_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -i "minor:"; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
          
          # Function to get latest version of a package
          get_latest_version() {
            local PKG_NAME=$1
            npm view "@insightblue-co/${PKG_NAME}" version 2>/dev/null || echo "0.0.0"
          }
          
          # Function to increment version
          increment_version() {
            local version=$1
            local increment_type=$2
            
            IFS='.' read -r major minor patch <<< "$version"
            
            case $increment_type in
              major)
                echo "$((major + 1)).0.0"
                ;;
              minor)
                echo "${major}.$((minor + 1)).0"
                ;;
              patch)
                echo "${major}.${minor}.$((patch + 1))"
                ;;
            esac
          }
          
          # Array to store version changes
          declare -A VERSION_CHANGES
          
          # First publish individual packages
          for pkg in packages/*; do
            if [ -f "$pkg/package.json" ]; then
              echo "Publishing $pkg"
              cd $pkg
              
              # Get the package name without any existing scope
              BASE_NAME=$(node -p "require('./package.json').name.replace(/^@[^/]+\/?/, '')")
              SCOPED_NAME="pdfme-${BASE_NAME}"
              
              # Get latest version and increment it
              CURRENT_VERSION=$(get_latest_version "$SCOPED_NAME")
              NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$VERSION_TYPE")
              
              # Store the version change
              VERSION_CHANGES[$SCOPED_NAME]=$NEW_VERSION
              
              # Set the new scoped name and version
              npm pkg set name="@insightblue-co/${SCOPED_NAME}"
              npm pkg set version="$NEW_VERSION"
              
              # Save package.json changes
              git add package.json
              
              # Publish package
              npm publish || echo "Package already exists, skipping..."
              
              cd ../..
            fi
          done
          
          # Publish main package
          cd $TEMP_DIR
          
          # Get latest version and increment it
          CURRENT_VERSION=$(get_latest_version "pdfme")
          NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$VERSION_TYPE")
          
          # Update version
          npm pkg set version="$NEW_VERSION"
          
          # Update dependency versions
          for pkg in ../packages/*; do
            if [ -f "$pkg/package.json" ]; then
              BASE_NAME=$(cd $pkg && node -p "require('./package.json').name.replace(/^@[^/]+\/?/, '')")
              SCOPED_NAME="pdfme-${BASE_NAME}"
              DEP_VERSION=${VERSION_CHANGES[$SCOPED_NAME]}
              npm pkg set "dependencies.@insightblue-co/${SCOPED_NAME}"="^${DEP_VERSION}"
            fi
          done
          
          # Publish main package
          npm publish || echo "Package already exists, skipping..."
          cd ..
          
          # Cleanup
          rm -rf $TEMP_DIR
          
          # Create version bump commit
          cd $GITHUB_WORKSPACE
          git add packages/*/package.json
          git commit -m "chore: bump versions [skip ci]" || echo "No version changes to commit"
          git push
          git push --tags
